/*
 * Copyright (C) 2023 thevalidator
 */
package ru.thevalidator.daivinchikmatcher.matcher.impl;

import java.util.HashSet;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import static ru.thevalidator.daivinchikmatcher.handler.Identifier.REGEXP;

/**
 *
 * @author thevalidator <the.validator@yandex.ru>
 */
public class ProfileMatchCheckerImplTest {

    static ProfileMatcherImpl instance;
    static final Pattern pattern = Pattern.compile(REGEXP);
    static Matcher matcher;
    String text;
    String text2;
    String text3;
    String text4;
    String text5;

    public ProfileMatchCheckerImplTest() {
        text = "Victoria, 21, –ú–∞–ª–æ—è—Ä–æ—Å–ª–∞–≤–µ—Ü<br>–°–µ–∫—Ä–µ—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞";
        text2 = "–Ø–Ω–∞, 24, –ö–∞–ª—É–≥–∞";
        text3 = "–ú–∞—à–∞, 15, –ú–æ—Å–∫–≤–∞‚ô°";
        text4 = "–ö–æ–º—É-—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞:<br><br>‚ô°, 19, –ù–æ–≤–æ–º–æ—Å–∫–æ–≤—Å–∫–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –æ–∫—Ä—É–≥<br>–ø—Ä–∏–≤–µ—Ç ?<br>–ª—é–±–ª—é –∫–æ—à–µ–∫ –∏ –≤ —Ü–µ–ª–æ–º –≤—Å–µ—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö";
        text5 = "–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞, 23, –ú–æ—Å–∫–≤–∞<br>–ò—â—É –∞–¥–µ–∫–≤–∞—Ç–Ω—ã—Ö –ª—é–¥–µ–π –≤ –±–µ—Å–µ–¥—É üòâ–µ—Å–ª–∏ –≤–∞–º –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±—â–µ–Ω–∏—è –≤ –±–µ—Å–µ–¥–µ –º–∏–º–æ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞üòå";
    }

    @BeforeAll
    public static void setUpClass() {
        instance = new ProfileMatcherImpl(new HashSet<>());
    }

    @AfterAll
    public static void tearDownClass() {
    }

    @BeforeEach
    public void setUp() {
    }

    @AfterEach
    public void tearDown() {
    }

//    @Test
//    public void testIsMatched() {
////        System.out.println("isMatched");
////        String text = "";
////        ProfileMatcherImpl instance = new ProfileMatcherImpl();
////        boolean expResult = false;
////        boolean result = instance.isMatched(text);
////        assertEquals(expResult, result);
////        fail("The test case is a prototype.");
//
////        String s = "[CASE]-2";
////        System.out.println(s.substring(7));
//    }

    @Test
    public void testGetName() {
        matcher = pattern.matcher(text);
        matcher.find();
        String result = instance.getName(matcher);
        assertEquals("Victoria", result);
        
        matcher = pattern.matcher(text2);
        matcher.find();
        String result2 = instance.getName(matcher);
        assertEquals("–Ø–Ω–∞", result2);
        
        matcher = pattern.matcher(text3);
        matcher.find();
        String result3 = instance.getName(matcher);
        assertEquals("–ú–∞—à–∞", result3);
        
        matcher = pattern.matcher(text4);
        matcher.find();
        String result4 = instance.getName(matcher);
        assertEquals("‚ô°", result4);
        
        matcher = pattern.matcher(text5);
        matcher.find();
        String result5 = instance.getName(matcher);
        assertEquals("–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞", result5);
        
    }

    @Test
    public void testGetAge() {
        matcher = pattern.matcher(text);
        matcher.find();
        String result = instance.getAge(matcher);
        assertEquals("21", result);
        
        matcher = pattern.matcher(text2);
        matcher.find();
        String result2 = instance.getAge(matcher);
        assertEquals("24", result2);
        
        matcher = pattern.matcher(text3);
        matcher.find();
        String result3 = instance.getAge(matcher);
        assertEquals("15", result3);
        
        matcher = pattern.matcher(text4);
        matcher.find();
        String result4 = instance.getAge(matcher);
        assertEquals("19", result4);
    }

    @Test
    public void testGetCity() {
        matcher = pattern.matcher(text);
        matcher.find();
        String result = instance.getCity(matcher);
        assertEquals("–º–∞–ª–æ—è—Ä–æ—Å–ª–∞–≤–µ—Ü", result);
        
        matcher = pattern.matcher(text2);
        matcher.find();
        String result2 = instance.getCity(matcher);
        assertEquals("–∫–∞–ª—É–≥–∞", result2);
        
        matcher = pattern.matcher(text3);
        matcher.find();
        String result3 = instance.getCity(matcher);
        assertEquals("–º–æ—Å–∫–≤–∞", result3);
        
        matcher = pattern.matcher(text4);
        matcher.find();
        String result4 = instance.getCity(matcher);
        assertEquals("–Ω–æ–≤–æ–º–æ—Å–∫–æ–≤—Å–∫–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –æ–∫—Ä—É–≥", result4);
    }

    @Test
    public void testGetText() {
        matcher = pattern.matcher(text);
        matcher.find();
        String result = instance.getText(matcher);
        assertEquals("<br>–°–µ–∫—Ä–µ—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", result);
        
        matcher = pattern.matcher(text2);
        matcher.find();
        String result2 = instance.getText(matcher);
        assertEquals("", result2);
        
        matcher = pattern.matcher(text3);
        matcher.find();
        String result3 = instance.getText(matcher);
        assertEquals("", result3);
        
        matcher = pattern.matcher(text4);
        matcher.find();
        String result4 = instance.getText(matcher);
        assertEquals("<br>–ø—Ä–∏–≤–µ—Ç ?<br>–ª—é–±–ª—é –∫–æ—à–µ–∫ –∏ –≤ —Ü–µ–ª–æ–º –≤—Å–µ—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö", result4);
    }

}
