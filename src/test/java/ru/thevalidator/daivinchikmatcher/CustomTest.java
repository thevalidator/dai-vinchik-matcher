/*
 * Copyright (C) 2023 thevalidator
 */
package ru.thevalidator.daivinchikmatcher;

import java.io.FileNotFoundException;
import java.io.UnsupportedEncodingException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import ru.thevalidator.daivinchikmatcher.util.EmojiCleaner;
import ru.thevalidator.daivinchikmatcher.util.SoundUtil;

/**
 *
 * @author thevalidator <the.validator@yandex.ru>
 */
public class CustomTest {

    public CustomTest() {
    }

    @BeforeAll
    public static void setUpClass() {
    }

    @AfterAll
    public static void tearDownClass() {
    }

    @BeforeEach
    public void setUp() {
    }

    @AfterEach
    public void tearDown() {
    }

    @Test
    public void testPlayAlert() {
        SoundUtil.playAlarm();
    }

    @Test
    public void testPlayNotification() {
        SoundUtil.playNotification();
    }

    @Test
    public void testChatAtIndex() {
        String text = "{\"failed\":1,\"ts\":12345678}";
        System.out.println(text.charAt(10));
        System.out.println(text.substring(17, text.length() - 1));
    }

    @Test
    public void testStringRemoveLines() {
        //String text = "–í—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∫–µ—Ç—ã –∏—Å—Ç–µ–∫–ª–æ, –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.<br><br>–í —Ç–≤–æ–µ–π –∞–Ω–∫–µ—Ç–µ —Å–æ–≤—Å–µ–º –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞";
        String text = "–í—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∫–µ—Ç—ã –∏—Å—Ç–µ–∫–ª–æ, –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.\n\n–í —Ç–≤–æ–µ–π –∞–Ω–∫–µ—Ç–µ —Å–æ–≤—Å–µ–º –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞";
        if (text.startsWith("–í—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∫–µ—Ç—ã –∏—Å—Ç–µ–∫–ª–æ")) {
            text = text.replaceFirst("–í—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∫–µ—Ç—ã –∏—Å—Ç–µ–∫–ª–æ, –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.(<br><br>|\n\n)", "");
        }

        System.out.println(text);
    }

    @Test
    public void testExtractTs() {
        String responseContent = "{\"failed\":1,\"ts\":1659999797}\n";
        String ts = null;
        System.out.println(responseContent);
        System.out.println(responseContent.substring(17, responseContent.length() - 1));

        if (responseContent.startsWith("{\"failed\":")) {
            char errorCode = responseContent.charAt(10);
            //"failed":1 ‚Äî –∏—Å—Ç–æ—Ä–∏—è —Å–æ–±—ã—Ç–∏–π —É—Å—Ç–∞—Ä–µ–ª–∞ –∏–ª–∏ –±—ã–ª–∞ —á–∞—Å—Ç–∏—á–Ω–æ —É—Ç–µ—Ä—è–Ω–∞, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –¥–∞–ª–µ–µ, –∏—Å–ø–æ–ª—å–∑—É—è –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ts –∏–∑ –æ—Ç–≤–µ—Ç–∞.
            //"failed":2 ‚Äî –∏—Å—Ç–µ–∫–ª–æ –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞, –Ω—É–∂–Ω–æ –∑–∞–Ω–æ–≤–æ –ø–æ–ª—É—á–∏—Ç—å key –º–µ—Ç–æ–¥–æ–º messages.getLongPollServer.
            //"failed":3 ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —É—Ç—Ä–∞—á–µ–Ω–∞, –Ω—É–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–≤—ã–µ key –∏ ts –º–µ—Ç–æ–¥–æ–º messages.getLongPollServer.
            switch (errorCode) {
                case '1' ->
                    ts = responseContent.trim().substring(17).concat("090909sad}{}{{/asddfe").replaceAll("[^0-9]", "");
                case '2' -> {
                    //serverData = vk.messages().getLongPollServer(actor).execute();
                    //key = serverData.getKey();
                }
                default -> {
                    //serverData = vk.messages().getLongPollServer(actor).execute();
                    //key = serverData.getKey();
                    //ts = String.valueOf(serverData.getTs());
                }
            }
        }

        System.out.println("ts=" + ts);
    }

    @Test
    public void testRemoveEmoji() throws FileNotFoundException, UnsupportedEncodingException {
        String emoji = "‚ô°" + "–ü–æ–ª–∏–Ω–∞, 15, üìç–ú–æ—Å–∫–≤–∞";

        String res = EmojiCleaner.clean(emoji);
        System.out.println(EmojiCleaner.isEmoji("‚ô°"));
        System.out.println(EmojiCleaner.isEmoji("üìç"));

        System.out.printf("before: %s\n after: %s\n", emoji, res);

        assertEquals("–ü–æ–ª–∏–Ω–∞, 15, –ú–æ—Å–∫–≤–∞", res);

    }

    @Test
    public void testCreateSettingsJson() {
//        Map<Parameter, Object> settings = Settings.loadSettings();
//        
//        settings.put(Parameter.AGE_FILTER, false);
//        settings.put(Parameter.DEBUG_MODE, false);
//        settings.put(Parameter.HOURS_TO_SLEEP, 15);
//        settings.put(Parameter.SOUND_ALARM, false);
//        settings.put(Parameter.WINDOW_DIMENTIONS, new int[] {800, 700});
//        
//        Settings.saveSettings(settings);
    }

    @Test
    public void testSubstring() {
        System.out.println("vk.com/id386179098".substring(9));
    }

    @Test
    public void testExtractingDigits() {
        Pattern p = Pattern.compile("[\\p{Nd}]+");
        Matcher m = p.matcher("–¢—ã –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å 15 –ø–∞—Ä–Ω—è–º, –ø–æ–∫–∞–∑–∞—Ç—å –∏—Ö?");
        if (m.find()) {
            System.out.println(m.group());
        }
    }

}
