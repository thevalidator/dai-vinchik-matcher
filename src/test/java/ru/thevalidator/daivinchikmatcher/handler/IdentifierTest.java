/*
 * Copyright (C) 2023 thevalidator
 */
package ru.thevalidator.daivinchikmatcher.handler;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.util.List;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import ru.thevalidator.daivinchikmatcher.dto.keyboard.Button;
import ru.thevalidator.daivinchikmatcher.util.EmojiCleaner;
import ru.thevalidator.daivinchikmatcher.util.ExceptionUtil;

/**
 *
 * @author thevalidator <the.validator@yandex.ru>
 */
public class IdentifierTest {

    static ObjectMapper mapper;

    public IdentifierTest() {
    }

    @BeforeAll
    public static void setUpClass() {
        mapper = new ObjectMapper();
    }

    @AfterAll
    public static void tearDownClass() {
    }

    @BeforeEach
    public void setUp() {
    }

    @AfterEach
    public void tearDown() {
    }

    @Test
    public void testIsProfile() {
        String text = "–ò—Ä–∏–Ω–∞, 22, –í–æ—Ä—Å–∏–Ω–æ<br>–ü—Ä–∏–≤–µ—Ç–∏–∫, —Ö–æ—á—É –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –ø–æ–æ–±—â–∞—Ç—å—Å—è –∞ —Ç–∞–º –∫–∞–∫ –ø–æ–π–¥–µ—Ç –æ–±—â–µ–Ω–∏–µ?."
                + "<br>–û —Å–µ–±–µ –∫–æ—Ä–æ—Ç–∫–æ —Ä–∞—Å—Å–∫–∞–∂—É: <br>–Ø –¥–µ–≤–æ—á–∫–∞ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º –≤ –∫–æ—Ç–æ—Ä–æ–π –µ—â? –¥–µ—Å—Ç–≤–æ –∏–≥—Ä–∞–µ—Ç.–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç"
                + "—Å—è —Ä–∏—Å–æ–≤–∞—Ç—å, —Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–ª—å–º—ã –∏ ^~^–∞–Ω–∏–º–µ—à–∫—É.–û–±–∞–∂–∞—é –∂–∏–≤–æ—Ç–Ω—ã—Ö –æ—Å–æ–±–µ–Ω–Ω–æ –∫–æ—à–µ–∫, —Ç–∞–∫ –∂–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —ç–∫—Å"
                + "–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å –≤—ã–ø–µ—á–∫–æ–π)).<br>–ü–æ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ ??. <br>–ò–∑ –º—É–∑—ã–∫–∏ –º–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –†–æ–∫, –ú–µ—Ç–∞–ª–ª "
                + "–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å —Ö–æ—Ä–æ—à–æ –∑–≤—É—á–∞—â–µ–µ(–Ω—Ä–∞–≤–∏—Ç—Å—è —Ç—É—Å–∏—Ç—å –≤ —Ö–æ—Ä–æ—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏,–Ω–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è?). <br>–ú–æ—è –º–µ"
                + "—á—Ç–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ –º–∏—Ä—É –∏ –æ–¥–Ω–∞–∂–¥—ã —Å–ª–µ—Ç–∞—Ç—å –≤ –Ø–ø–æ–Ω–∏—é.???,";
        String buttonsData = "[\n"
                + "	{\n"
                + "		\"action\": {\n"
                + "			\"type\": \"text\",\n"
                + "			\"payload\": \"1\",\n"
                + "			\"label\": \"??\"\n"
                + "		},\n"
                + "		\"color\": \"positive\"\n"
                + "	},\n"
                + "	{\n"
                + "		\"action\": {\n"
                + "			\"type\": \"text\",\n"
                + "			\"payload\": \"2\",\n"
                + "			\"label\": \"?\"\n"
                + "		},\n"
                + "		\"color\": \"positive\"\n"
                + "	},\n"
                + "	{\n"
                + "		\"action\": {\n"
                + "			\"type\": \"text\",\n"
                + "			\"payload\": \"3\",\n"
                + "			\"label\": \"?\"\n"
                + "		},\n"
                + "		\"color\": \"negative\"\n"
                + "	},\n"
                + "	{\n"
                + "		\"action\": {\n"
                + "			\"type\": \"text\",\n"
                + "			\"payload\": \"4\",\n"
                + "			\"label\": \"?\"\n"
                + "		},\n"
                + "		\"color\": \"default\"\n"
                + "	}\n"
                + "]";

        try {

            List<Button> buttons = mapper.readValue(buttonsData, new TypeReference<List<Button>>() {
            });
            boolean result = Identifier.isProfile(EmojiCleaner.clean(text), buttons);
            assertTrue(result);

        } catch (JsonProcessingException ex) {
            System.out.println(ExceptionUtil.getFormattedDescription(ex));
            fail(ex.getMessage());
        }
    }

    @Test
    public void testIsProfile2() {
        String text = "–ò—Ä–∏–Ω–∞, 22, –í–æ—Ä—Å–∏–Ω–æ\n"
                + "–ü—Ä–∏–≤–µ—Ç–∏–∫, —Ö–æ—á—É –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –ø–æ–æ–±—â–∞—Ç—å—Å—è –∞ —Ç–∞–º –∫–∞–∫ –ø–æ–π–¥–µ—Ç –æ–±—â–µ–Ω–∏–µ?.\n"
                + "–û —Å–µ–±–µ –∫–æ—Ä–æ—Ç–∫–æ —Ä–∞—Å—Å–∫–∞–∂—É: \n"
                + "–Ø –¥–µ–≤–æ—á–∫–∞ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º –≤ –∫–æ—Ç–æ—Ä–æ–π –µ—â? –¥–µ—Å—Ç–≤–æ –∏–≥—Ä–∞–µ—Ç.–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —Ä–∏—Å–æ–≤–∞—Ç—å, —Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–ª—å–º—ã –∏ ^~^–∞–Ω–∏–º–µ—à–∫—É.–û–±–∞–∂–∞—é –∂–∏–≤–æ—Ç–Ω—ã—Ö –æ—Å–æ–±–µ–Ω–Ω–æ –∫–æ—à–µ–∫, —Ç–∞–∫ –∂–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å –≤—ã–ø–µ—á–∫–æ–π)).\n"
                + "–ü–æ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ ??. \n"
                + "–ò–∑ –º—É–∑—ã–∫–∏ –º–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –†–æ–∫, –ú–µ—Ç–∞–ª–ª –∏ —á—Ç–æ-–Ω–∏–±—É–¥—å —Ö–æ—Ä–æ—à–æ –∑–≤—É—á–∞—â–µ–µ(–Ω—Ä–∞–≤–∏—Ç—Å—è —Ç—É—Å–∏—Ç—å –≤ —Ö–æ—Ä–æ—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏,–Ω–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è?). \n"
                + "–ú–æ—è –º–µ—á—Ç–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ –º–∏—Ä—É –∏ –æ–¥–Ω–∞–∂–¥—ã —Å–ª–µ—Ç–∞—Ç—å –≤ –Ø–ø–æ–Ω–∏—é.???";
        String buttonsData = "[\n"
                + "	{\n"
                + "		\"action\": {\n"
                + "			\"type\": \"text\",\n"
                + "			\"payload\": \"1\",\n"
                + "			\"label\": \"??\"\n"
                + "		},\n"
                + "		\"color\": \"positive\"\n"
                + "	},\n"
                + "	{\n"
                + "		\"action\": {\n"
                + "			\"type\": \"text\",\n"
                + "			\"payload\": \"2\",\n"
                + "			\"label\": \"?\"\n"
                + "		},\n"
                + "		\"color\": \"positive\"\n"
                + "	},\n"
                + "	{\n"
                + "		\"action\": {\n"
                + "			\"type\": \"text\",\n"
                + "			\"payload\": \"3\",\n"
                + "			\"label\": \"?\"\n"
                + "		},\n"
                + "		\"color\": \"negative\"\n"
                + "	},\n"
                + "	{\n"
                + "		\"action\": {\n"
                + "			\"type\": \"text\",\n"
                + "			\"payload\": \"4\",\n"
                + "			\"label\": \"?\"\n"
                + "		},\n"
                + "		\"color\": \"default\"\n"
                + "	}\n"
                + "]";

        try {

            List<Button> buttons = mapper.readValue(buttonsData, new TypeReference<List<Button>>() {
            });
            boolean result = Identifier.isProfile(EmojiCleaner.clean(text), buttons);
            assertTrue(result);

        } catch (JsonProcessingException ex) {
            System.out.println(ExceptionUtil.getFormattedDescription(ex));
            fail(ex.getMessage());
        }
    }

    @Test
    public void testIsProfile3() {
        String text = "–í—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∫–µ—Ç—ã –∏—Å—Ç–µ–∫–ª–æ, –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.\n"
                + "\n"
                + "ü¶ä~ L–∏S–µ–ΩO–ö ~ü¶ä, 23, –ö–∞–ª—É–≥–∞\n"
                + "–ù–æ —É –º–µ–Ω—è —Å –º–∞—Ä—Ç–∏–Ω–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä –∫–æ—Ä–æ—Ç–∫–∏–π. –Ø –µ–≥–æ –Ω–µ... –Ω—É, –Ω–µ... –æ—á–µ–Ω—å –ª—é–±.. –Ω—É, –ø–∏–ª, –Ω–æ –Ω–µ –ª—é–±–ª... –Ω–æ –ª—é–±–ª—é... –Ω–æ –Ω–µ –º–Ω–æ–≥–æ –ø—å—é –µ–≥–æ.. –Ω–æ –ø—å—é";
        String buttonsData = "[{\"action\":{\"label\":\"‚ù§Ô∏è\",\"payload\":\"1\",\"type\":\"text\"},\"color\":\"positive\"}, {\"action\":{\"label\":\"üíå\",\"payload\":\"2\",\"type\":\"text\"},\"color\":\"positive\"}, {\"action\":{\"label\":\"üëé\",\"payload\":\"3\",\"type\":\"text\"},\"color\":\"negative\"}, {\"action\":{\"label\":\"üí§\",\"payload\":\"4\",\"type\":\"text\"},\"color\":\"default\"}]";

        try {

            List<Button> buttons = mapper.readValue(buttonsData, new TypeReference<List<Button>>() {
            });
            boolean result = Identifier.isProfile(EmojiCleaner.clean(text), buttons);
            assertTrue(result);

        } catch (JsonProcessingException ex) {
            System.out.println(ExceptionUtil.getFormattedDescription(ex));
            fail(ex.getMessage());
        }
    }

    @Test
    public void testIsProfile4() {
        String text = ", 15, –ú–æ—Å–∫–≤–∞<br>–Ω—É–∂–µ–Ω –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫, –ø–æ–≤—ã—à–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞ –≤ —Å—á—ë—Ç.";
        String buttonsData = "[{\"action\":{\"type\":\"text\",\"payload\":\"1\",\"label\":\"‚ù§Ô∏è\"},\"color\":\"positive\"},{\"action\":{\"type\":\"text\",\"payload\":\"2\",\"label\":\"üíå\"},\"color\":\"positive\"},{\"action\":{\"type\":\"text\",\"payload\":\"3\",\"label\":\"üëé\"},\"color\":\"negative\"},{\"action\":{\"type\":\"text\",\"payload\":\"4\",\"label\":\"üí§\"},\"color\":\"default\"}]";

        try {

            List<Button> buttons = mapper.readValue(buttonsData, new TypeReference<List<Button>>() {
            });
            boolean result = Identifier.isProfile(EmojiCleaner.clean(text), buttons);
            assertTrue(result);

        } catch (JsonProcessingException ex) {
            System.out.println(ExceptionUtil.getFormattedDescription(ex));
            fail(ex.getMessage());
        }
    }

    @Test
    public void testIsProfile5() {
        //String text = "–Ω–∞—Ç–∞—à–∞, 15, –ú–æ—Å–∫–≤–∞\n–ø—Ä–∏–≤–µ—Ç)\n15 –ª–µ—Ç, —Ä–æ—Å—Ç 175, —Å—Ç—Ä–µ–ª–µ—Ü\n—É—á—É—Å—å –≤ –ø–æ–ª–∏—Ç–µ—Ö–µ, —Å–ø–ª—é\n–∏—â—É –Ω–æ–≤—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏, –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—Å—Ç—ã—Ö —Ä–µ–±—è—Ç\n–æ–±–Ω–∏–º–∞—é!";
        String text = "–Ω–∞—Ç–∞—à–∞, 15, –ú–æ—Å–∫–≤–∞<br>–ø—Ä–∏–≤–µ—Ç)<br>15 –ª–µ—Ç, —Ä–æ—Å—Ç 175, —Å—Ç—Ä–µ–ª–µ—Ü<br>—É—á—É—Å—å –≤ –ø–æ–ª–∏—Ç–µ—Ö–µ, —Å–ø–ª—é<br>–∏—â—É –Ω–æ–≤—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏, –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—Å—Ç—ã—Ö —Ä–µ–±—è—Ç<br>–æ–±–Ω–∏–º–∞—é!";
        String buttonsData = "[{\"action\":{\"type\":\"text\",\"payload\":\"1\",\"label\":\"‚ù§Ô∏è\"},\"color\":\"positive\"},{\"action\":{\"type\":\"text\",\"payload\":\"2\",\"label\":\"üíå\"},\"color\":\"positive\"},{\"action\":{\"type\":\"text\",\"payload\":\"3\",\"label\":\"üëé\"},\"color\":\"negative\"},{\"action\":{\"type\":\"text\",\"payload\":\"4\",\"label\":\"üí§\"},\"color\":\"default\"}]";

        try {

            List<Button> buttons = mapper.readValue(buttonsData, new TypeReference<List<Button>>() {
            });
            boolean result = Identifier.isProfile(EmojiCleaner.clean(text), buttons);
            assertTrue(result);

        } catch (JsonProcessingException ex) {
            System.out.println(ExceptionUtil.getFormattedDescription(ex));
            fail(ex.getMessage());
        }
    }

    @Test
    public void testIsProfile6() {
        String text = ", 16, –ú–æ—Å–∫–≤–∞<br>–ö–æ—Å—Ç—è";
        String buttonsData = "[{\"action\":{\"type\":\"text\",\"payload\":\"1\",\"label\":\"‚ù§Ô∏è\"},\"color\":\"positive\"},{\"action\":{\"type\":\"text\",\"payload\":\"2\",\"label\":\"üíå\"},\"color\":\"positive\"},{\"action\":{\"type\":\"text\",\"payload\":\"3\",\"label\":\"üëé\"},\"color\":\"negative\"},{\"action\":{\"type\":\"text\",\"payload\":\"4\",\"label\":\"üí§\"},\"color\":\"default\"}]";

        try {

            List<Button> buttons = mapper.readValue(buttonsData, new TypeReference<List<Button>>() {
            });
            boolean result = Identifier.isProfile(EmojiCleaner.clean(text), buttons);
            assertTrue(result);

        } catch (JsonProcessingException ex) {
            System.out.println(ExceptionUtil.getFormattedDescription(ex));
            fail(ex.getMessage());
        }
    }

    @Test
    public void testIsProfile7() {
        String text = "—ç–Ω–≤–∏—Å–ª–∏, 16, –ú–æ—Å–∫–≤–∞\n–æ—Å–Ω–æ–≤–Ω–æ–µ —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –ø—Ä–æ–ª–∏—Å—Ç—ã–≤–∞—Ç—å –≤–∞–º –∏–ª–∏ –Ω–µ—Ç \n–∏–≥—Ä–∞—é –≤ –∏–≥—Ä—ã(–≥–µ–Ω—à, –±—Å, —Å–µ–∫–∞–π, –¥–µ—Ç–∏ —Å–≤–µ—Ç–∞ –∏ —Ç–¥), –∞–Ω–∏–º–µ, –Ω—É –±–∞–∑–∞ –∫–æ—Ä–æ—á–µ, –ª—é–±–ª—é —á–∞–π, —á–∞–π –ª—é–±–∏—Ç –º–µ–Ω—è, –ø–æ –∑–Ω–∞–∫—É –∑–æ–¥–∏–∞–∫–∞ —Ç–µ–ª–µ—Ü, —Ö–æ—á—É —á–µ–±—É–ø–∏—Ü—Ü—É, –æ–±—ã—á–Ω–æ –∞–∫—Ç–∏–≤–Ω–µ–µ –≤—Å–µ–≥–æ —è –≤–µ—á–µ—Ä–æ–º –∏ –Ω–æ—á—å—é";
        String buttonsData = "[{\"action\":{\"type\":\"text\",\"payload\":\"1\",\"label\":\"‚ù§Ô∏è\"},\"color\":\"positive\"},{\"action\":{\"type\":\"text\",\"payload\":\"2\",\"label\":\"üíå\"},\"color\":\"positive\"},{\"action\":{\"type\":\"text\",\"payload\":\"3\",\"label\":\"üëé\"},\"color\":\"negative\"},{\"action\":{\"type\":\"text\",\"payload\":\"4\",\"label\":\"üí§\"},\"color\":\"default\"}]";

        try {

            List<Button> buttons = mapper.readValue(buttonsData, new TypeReference<List<Button>>() {
            });
            boolean result = Identifier.isProfile(EmojiCleaner.clean(text), buttons);
            assertTrue(result);

        } catch (JsonProcessingException ex) {
            System.out.println(ExceptionUtil.getFormattedDescription(ex));
            fail(ex.getMessage());
        }
    }

    @Test
    public void testIsProfile8() {
        String text = "–ù–∏–∫–∞–∫ , 15, –ú–æ—Å–∫–≤–∞ üòö<br>–í–∑–∞–∏–º–Ω—ã–µ –ª–∞–π–∫–∏üíó";
        String buttonsData = "[{\"action\":{\"type\":\"text\",\"payload\":\"1\",\"label\":\"‚ù§Ô∏è\"},\"color\":\"positive\"},{\"action\":{\"type\":\"text\",\"payload\":\"2\",\"label\":\"üíå\"},\"color\":\"positive\"},{\"action\":{\"type\":\"text\",\"payload\":\"3\",\"label\":\"üëé\"},\"color\":\"negative\"},{\"action\":{\"type\":\"text\",\"payload\":\"4\",\"label\":\"üí§\"},\"color\":\"default\"}]";

        try {

            List<Button> buttons = mapper.readValue(buttonsData, new TypeReference<List<Button>>() {
            });
            boolean result = Identifier.isProfile(EmojiCleaner.clean(text), buttons);
            assertTrue(result);

        } catch (JsonProcessingException ex) {
            System.out.println(ExceptionUtil.getFormattedDescription(ex));
            fail(ex.getMessage());
        }
    }

    @Test
    public void testIsProfile9() {
        String text = "–ù0–¥–µ–∂–¥–∞, 15, –ú–æ—Å–∫–≤–∞\n–º–µ–Ω—è –∑–∞–¥–æ–ª–±–∞–ª –î–í —Å —Ç–µ–º, —á—Ç–æ–±—ã –≤ –º–æ–µ–π –∞–Ω–∫–µ—Ç–µ –±—ã–ª –∫–∞–∫–æ–π-—Ç–æ —Ç–µ–∫—Å—Ç. –Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –ø–∏—Å–∞—Ç—å, –ø–æ—ç—Ç–æ–º—É –Ω–∞–ø–∏—à—É –∫–∞–∫–æ–π-—Ç–æ —Ñ–∏–≥–Ω–∏ –¥–ª—è \"–∞—Å—Ç—Ä–æ–ª–æ–≥–æ–≤\" –∏ –º–∏–∫—Ä–æ—á–µ–ª–∏–∫–æ–≤:\n–†–æ—Å—Ç: 172\n–ó–ó: –ª–µ–≤\n–ü–æ–ª–Ω–∞—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:\n–í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è: 23.30\n–º–Ω–µ —Å–∫—É—á–Ω–æ";
        String buttonsData = "[{\"action\":{\"type\":\"text\",\"payload\":\"1\",\"label\":\"‚ù§Ô∏è\"},\"color\":\"positive\"},{\"action\":{\"type\":\"text\",\"payload\":\"2\",\"label\":\"üíå\"},\"color\":\"positive\"},{\"action\":{\"type\":\"text\",\"payload\":\"3\",\"label\":\"üëé\"},\"color\":\"negative\"},{\"action\":{\"type\":\"text\",\"payload\":\"4\",\"label\":\"üí§\"},\"color\":\"default\"}]";

        try {

            List<Button> buttons = mapper.readValue(buttonsData, new TypeReference<List<Button>>() {
            });
            boolean result = Identifier.isProfile(EmojiCleaner.clean(text), buttons);
            assertTrue(result);

        } catch (JsonProcessingException ex) {
            System.out.println(ExceptionUtil.getFormattedDescription(ex));
            fail(ex.getMessage());
        }
    }

    @Test
    public void testIsProfile10() {
        String text = "–î–∞—Ä—å—è, 18, –ú–æ—Å–∫–≤–∞ ‚Äì —Ä–∞–π–æ–Ω –ì–æ–ª—å—è–Ω–æ–≤–æ.<br>–£—á—É—Å—å –Ω–∞ –ø–æ–≤–∞—Ä–∞-–∫–æ–Ω–¥–∏—Ç–µ—Ä–∞. –ò—â—É –Ω–æ–≤—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ —ë–ø—Ç.";
        String buttonsData = "[{\"action\":{\"type\":\"text\",\"payload\":\"1\",\"label\":\"‚ù§Ô∏è\"},\"color\":\"positive\"},{\"action\":{\"type\":\"text\",\"payload\":\"2\",\"label\":\"üíå\"},\"color\":\"positive\"},{\"action\":{\"type\":\"text\",\"payload\":\"3\",\"label\":\"üëé\"},\"color\":\"negative\"},{\"action\":{\"type\":\"text\",\"payload\":\"4\",\"label\":\"üí§\"},\"color\":\"default\"}]";

        try {

            List<Button> buttons = mapper.readValue(buttonsData, new TypeReference<List<Button>>() {
            });
            boolean result = Identifier.isProfile(EmojiCleaner.clean(text), buttons);
            assertTrue(result);

        } catch (JsonProcessingException ex) {
            System.out.println(ExceptionUtil.getFormattedDescription(ex));
            fail(ex.getMessage());
        }
    }

    @Test
    public void testIsProfile11() {
        String text = "–ú–∞—Ä_–∏–Ω–∞, 21, –ø–æ—Å–µ–ª–æ–∫ –≥–æ—Ä–æ–¥—Å–∫–æ–≥–æ —Ç–∏–ø–∞ –°–µ–ª–µ–Ω–≥–∏–Ω—Å–∫<br>???";
        String buttonsData = "[{\"action\":{\"type\":\"text\",\"payload\":\"1\",\"label\":\"??\"},\"color\":\"positive\"},{\"action\":{\"type\":\"text\",\"payload\":\"2\",\"label\":\"?\"},\"color\":\"positive\"},{\"action\":{\"type\":\"text\",\"payload\":\"3\",\"label\":\"?\"},\"color\":\"negative\"},{\"action\":{\"type\":\"text\",\"payload\":\"4\",\"label\":\"?\"},\"color\":\"default\"}]";

        try {

            List<Button> buttons = mapper.readValue(buttonsData, new TypeReference<List<Button>>() {
            });
            boolean result = Identifier.isProfile(EmojiCleaner.clean(text), buttons);
            assertTrue(result);

        } catch (JsonProcessingException ex) {
            System.out.println(ExceptionUtil.getFormattedDescription(ex));
            fail(ex.getMessage());
        }
    }

    @Test
    public void testIsProfile12() {
        String text = "Vika, 21, –ö–∞–ª—É–≥–∞<br>üíôüíôüíô";
        String buttonsData = "[{\"action\":{\"type\":\"text\",\"payload\":\"1\",\"label\":\"??\"},\"color\":\"positive\"},{\"action\":{\"type\":\"text\",\"payload\":\"2\",\"label\":\"?\"},\"color\":\"positive\"},{\"action\":{\"type\":\"text\",\"payload\":\"3\",\"label\":\"?\"},\"color\":\"negative\"},{\"action\":{\"type\":\"text\",\"payload\":\"4\",\"label\":\"?\"},\"color\":\"default\"}]";

        try {

            List<Button> buttons = mapper.readValue(buttonsData, new TypeReference<List<Button>>() {
            });
            boolean result = Identifier.isProfile(EmojiCleaner.clean(text), buttons);
            assertTrue(result);

        } catch (JsonProcessingException ex) {
            System.out.println(ExceptionUtil.getFormattedDescription(ex));
            fail(ex.getMessage());
        }
    }

    @Test
    public void testIsProfile13() {
        String text = "–Ø –ù–∞—Å—Ç—è, –º–Ω–µ 14, –º–∏–ª–∞—è, –≤–µ—Å—ë–ª–∞—è) –¥–æ–±—Ä–∞—è,, 15, –ú–æ—Å–∫–≤–∞)\n–ò—â—É –≤–µ—Å—ë–ª—ã—Ö —Ä–µ–±—è—Ç, —Ç–∞–∫ –∫–∞–∫ –æ–¥–Ω–æ–π —Å–∫—É—á–Ω–æ , –Ω–∞–π–¥–∏—Ç–µ—Å—å ?\nP.S. –û—Å–æ–±–µ–Ω–Ω–æ –∫—Ä–∞—Å–∏–≤—ã—Ö ?";
        String buttonsData = "[{\"action\":{\"type\":\"text\",\"payload\":\"1\",\"label\":\"??\"},\"color\":\"positive\"},{\"action\":{\"type\":\"text\",\"payload\":\"2\",\"label\":\"?\"},\"color\":\"positive\"},{\"action\":{\"type\":\"text\",\"payload\":\"3\",\"label\":\"?\"},\"color\":\"negative\"},{\"action\":{\"type\":\"text\",\"payload\":\"4\",\"label\":\"?\"},\"color\":\"default\"}]";

        try {

            List<Button> buttons = mapper.readValue(buttonsData, new TypeReference<List<Button>>() {
            });
            boolean result = Identifier.isProfile(EmojiCleaner.clean(text), buttons);
            assertTrue(result);

        } catch (JsonProcessingException ex) {
            System.out.println(ExceptionUtil.getFormattedDescription(ex));
            fail(ex.getMessage());
        }
    }

    @Test
    public void testIsProfile14() {
        String text = "?, 16, –º—Å–∫?";
        String buttonsData = "[{\"action\":{\"type\":\"text\",\"payload\":\"1\",\"label\":\"??\"},\"color\":\"positive\"},{\"action\":{\"type\":\"text\",\"payload\":\"2\",\"label\":\"?\"},\"color\":\"positive\"},{\"action\":{\"type\":\"text\",\"payload\":\"3\",\"label\":\"?\"},\"color\":\"negative\"},{\"action\":{\"type\":\"text\",\"payload\":\"4\",\"label\":\"?\"},\"color\":\"default\"}]";

        try {

            List<Button> buttons = mapper.readValue(buttonsData, new TypeReference<List<Button>>() {
            });
            boolean result = Identifier.isProfile(EmojiCleaner.clean(text), buttons);
            assertTrue(result);

        } catch (JsonProcessingException ex) {
            System.out.println(ExceptionUtil.getFormattedDescription(ex));
            fail(ex.getMessage());
        }
    }

    @Test
    public void testIsProfile15() {
        String text = "–¢–∞–Ω—è, 17, –ú–æ—Å–∫–≤–∞ (—Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥)<br>–ø—Ä–∏–≤–µ—Ç ?<br>–ª—é–±–ª—é –∫–æ—à–µ–∫ –∏ –≤ —Ü–µ–ª–æ–º –≤—Å–µ—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö, —Ä–∞—Å—Ç–µ–Ω–∏—è, —Ö–æ—Ä–æ—à–∏—Ö, —É–≤–∞–∂–∞—é—â–∏—Ö –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π, –±–æ–±–∞ —Ç–∏ –∏ —á–∏–∑–∫–µ–π–∫–∏ <br>??";
        String buttonsData = "[{\"action\":{\"type\":\"text\",\"payload\":\"1\",\"label\":\"??\"},\"color\":\"positive\"},{\"action\":{\"type\":\"text\",\"payload\":\"2\",\"label\":\"?\"},\"color\":\"positive\"},{\"action\":{\"type\":\"text\",\"payload\":\"3\",\"label\":\"?\"},\"color\":\"negative\"},{\"action\":{\"type\":\"text\",\"payload\":\"4\",\"label\":\"?\"},\"color\":\"default\"}]";

        try {

            List<Button> buttons = mapper.readValue(buttonsData, new TypeReference<List<Button>>() {
            });
            boolean result = Identifier.isProfile(EmojiCleaner.clean(text), buttons);
            assertTrue(result);

        } catch (JsonProcessingException ex) {
            System.out.println(ExceptionUtil.getFormattedDescription(ex));
            fail(ex.getMessage());
        }
    }

    @Test
    public void testIsProfile16() {
        //what about symbols <>
        String text = "–¢–∞_–Ω—è!@#$%^&*()-+=\"|/':;`~‚Ññ?, 17, –ú–æ—Å–∫–≤–∞ (—Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥)<br>–ø—Ä–∏–≤–µ—Ç ?<br>–ª—é–±–ª—é –∫–æ—à–µ–∫ –∏ –≤ —Ü–µ–ª–æ–º –≤—Å–µ—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö, —Ä–∞—Å—Ç–µ–Ω–∏—è, —Ö–æ—Ä–æ—à–∏—Ö, —É–≤–∞–∂–∞—é—â–∏—Ö –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π, –±–æ–±–∞ —Ç–∏ –∏ —á–∏–∑–∫–µ–π–∫–∏ <br>??";
        String buttonsData = "[{\"action\":{\"type\":\"text\",\"payload\":\"1\",\"label\":\"??\"},\"color\":\"positive\"},{\"action\":{\"type\":\"text\",\"payload\":\"2\",\"label\":\"?\"},\"color\":\"positive\"},{\"action\":{\"type\":\"text\",\"payload\":\"3\",\"label\":\"?\"},\"color\":\"negative\"},{\"action\":{\"type\":\"text\",\"payload\":\"4\",\"label\":\"?\"},\"color\":\"default\"}]";

        try {

            List<Button> buttons = mapper.readValue(buttonsData, new TypeReference<List<Button>>() {
            });
            boolean result = Identifier.isProfile(EmojiCleaner.clean(text), buttons);
            assertTrue(result);

        } catch (JsonProcessingException ex) {
            System.out.println(ExceptionUtil.getFormattedDescription(ex));
            fail(ex.getMessage());
        }
    }

    @Test
    public void testIsProfile17() {
        String text = "–º—É—Ä–∫, 16, –º–æ—Å–∫–≤–∞<br>????????????";
        String buttonsData = "[{\"action\":{\"type\":\"text\",\"payload\":\"1\",\"label\":\"??\"},\"color\":\"positive\"},{\"action\":{\"type\":\"text\",\"payload\":\"2\",\"label\":\"?\"},\"color\":\"positive\"},{\"action\":{\"type\":\"text\",\"payload\":\"3\",\"label\":\"?\"},\"color\":\"negative\"},{\"action\":{\"type\":\"text\",\"payload\":\"4\",\"label\":\"?\"},\"color\":\"default\"}]";

        try {

            List<Button> buttons = mapper.readValue(buttonsData, new TypeReference<List<Button>>() {
            });
            boolean result = Identifier.isProfile(EmojiCleaner.clean(text), buttons);
            assertTrue(result);

        } catch (JsonProcessingException ex) {
            System.out.println(ExceptionUtil.getFormattedDescription(ex));
            fail(ex.getMessage());
        }
    }

    @Test
    public void testIsProfile18() {
        String text = "–°–æ–ª–Ω—ã—à–∫–æ‚ù§, 22, –ö–∞–ª—É–≥–∞\n"
                + "–†–æ—Å—Ç 158‚ú®";
        String buttonsData = "[{\"action\":{\"type\":\"text\",\"payload\":\"1\",\"label\":\"??\"},\"color\":\"positive\"},{\"action\":{\"type\":\"text\",\"payload\":\"2\",\"label\":\"?\"},\"color\":\"positive\"},{\"action\":{\"type\":\"text\",\"payload\":\"3\",\"label\":\"?\"},\"color\":\"negative\"},{\"action\":{\"type\":\"text\",\"payload\":\"4\",\"label\":\"?\"},\"color\":\"default\"}]";

        try {

            List<Button> buttons = mapper.readValue(buttonsData, new TypeReference<List<Button>>() {
            });
            boolean result = Identifier.isProfile(EmojiCleaner.clean(text), buttons);
            assertTrue(result);

        } catch (JsonProcessingException ex) {
            System.out.println(ExceptionUtil.getFormattedDescription(ex));
            fail(ex.getMessage());
        }
    }

    @Test
    public void testIsProfile19() {
        //String text = "–ê–π—Ç–∞ÃÅ, 23, –Ø–∫—É—Ç—Å–∫<br>–∏–≥—Ä–∞—é –≤ —Å–∏–º—Å –∏ –º–æ–±–∏–ª—å–Ω—ã–π –ø–∞–±–≥. —Å–ø–∞—Å–∏–±–æ.";
        //–ö–æ–º—É-—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞:<br><br>ÿ•ÿ®ÿ±ŸàŸáŸäŸÖ, 19, –ù–æ–≤–æ–º–æ—Å–∫–æ–≤—Å–∫–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –æ–∫—Ä—É–≥
        String text = "–ê–π—Ç–∞ÃÅ, 23, –Ø–∫—É—Ç—Å–∫<br>–∏–≥—Ä–∞—é –≤ —Å–∏–º—Å –∏ –º–æ–±–∏–ª—å–Ω—ã–π –ø–∞–±–≥. —Å–ø–∞—Å–∏–±–æ.";
        String buttonsData = "[{\"action\":{\"type\":\"text\",\"payload\":\"1\",\"label\":\"??\"},\"color\":\"positive\"},{\"action\":{\"type\":\"text\",\"payload\":\"2\",\"label\":\"?\"},\"color\":\"positive\"},{\"action\":{\"type\":\"text\",\"payload\":\"3\",\"label\":\"?\"},\"color\":\"negative\"},{\"action\":{\"type\":\"text\",\"payload\":\"4\",\"label\":\"?\"},\"color\":\"default\"}]";

        try {

            List<Button> buttons = mapper.readValue(buttonsData, new TypeReference<List<Button>>() {
            });
            boolean result = Identifier.isProfile(EmojiCleaner.clean(text), buttons);
            assertTrue(result);

        } catch (JsonProcessingException ex) {
            System.out.println(ExceptionUtil.getFormattedDescription(ex));
            fail(ex.getMessage());
        }
    }

    @Test
    public void testIsProfile20() {
        String text = "–ö–æ–º—É-—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞:<br><br>ÿ•ÿ®ÿ±ŸàŸáŸäŸÖ, 19, –ù–æ–≤–æ–º–æ—Å–∫–æ–≤—Å–∫–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –æ–∫—Ä—É–≥";
        String buttonsData = "[{\"action\":{\"type\":\"text\",\"payload\":\"1\",\"label\":\"‚ù§Ô∏è\"},\"color\":\"positive\"},{\"action\":{\"type\":\"text\",\"payload\":\"2\",\"label\":\"üëé\"},\"color\":\"negative\"},{\"action\":{\"type\":\"text\",\"payload\":\"3\",\"label\":\"–∂–∞–ª–æ–±–∞\"},\"color\":\"default\"},{\"action\":{\"type\":\"text\",\"payload\":\"4\",\"label\":\"üí§\"},\"color\":\"default\"}]";

        try {

            List<Button> buttons = mapper.readValue(buttonsData, new TypeReference<List<Button>>() {
            });
            boolean result = Identifier.isProfile(EmojiCleaner.clean(text), buttons);
            assertTrue(result);

        } catch (JsonProcessingException ex) {
            System.out.println(ExceptionUtil.getFormattedDescription(ex));
            fail(ex.getMessage());
        }
    }

    @Test
    public void testIsProfile21() {
        String text = "–ú–∞—à–∞, 15, –ú–æ—Å–∫–≤–∞‚ô°";
        String buttonsData = "[{\"action\":{\"type\":\"text\",\"payload\":\"1\",\"label\":\"‚ù§Ô∏è\"},\"color\":\"positive\"},{\"action\":{\"type\":\"text\",\"payload\":\"2\",\"label\":\"üíå\"},\"color\":\"positive\"},{\"action\":{\"type\":\"text\",\"payload\":\"3\",\"label\":\"üëé\"},\"color\":\"negative\"},{\"action\":{\"type\":\"text\",\"payload\":\"4\",\"label\":\"üí§\"},\"color\":\"default\"}]";

        try {

            List<Button> buttons = mapper.readValue(buttonsData, new TypeReference<List<Button>>() {
            });
            boolean result = Identifier.isProfile(EmojiCleaner.clean(text), buttons);
            assertTrue(result);

        } catch (JsonProcessingException ex) {
            System.out.println(ExceptionUtil.getFormattedDescription(ex));
            fail(ex.getMessage());
        }
    }
    
    @Test
    public void testIsProfile22() {
        String text = "–ü–æ–ª–∏–Ω–∞, 17, –ú–æ—Å–∫–≤–∞";
        String buttonsData = "[{\"action\":{\"type\":\"text\",\"payload\":\"1\",\"label\":\"‚ù§Ô∏è\"},\"color\":\"positive\"},{\"action\":{\"type\":\"text\",\"payload\":\"2\",\"label\":\"üíå\"},\"color\":\"positive\"},{\"action\":{\"type\":\"text\",\"payload\":\"3\",\"label\":\"üëé\"},\"color\":\"negative\"},{\"action\":{\"type\":\"text\",\"payload\":\"4\",\"label\":\"üí§\"},\"color\":\"default\"}]";

        try {

            List<Button> buttons = mapper.readValue(buttonsData, new TypeReference<List<Button>>() {
            });
            boolean result = Identifier.isProfile(EmojiCleaner.clean(text), buttons);
            assertTrue(result);

        } catch (JsonProcessingException ex) {
            System.out.println(ExceptionUtil.getFormattedDescription(ex));
            fail(ex.getMessage());
        }
    }
    
    @Test
    public void testIsProfile23() {
        String text = "–ü–æ–ª–∏–Ω–∞, 15, üìç–ú–æ—Å–∫–≤–∞";
        String buttonsData = "[{\"action\":{\"type\":\"text\",\"payload\":\"1\",\"label\":\"‚ù§Ô∏è\"},\"color\":\"positive\"},{\"action\":{\"type\":\"text\",\"payload\":\"2\",\"label\":\"üíå\"},\"color\":\"positive\"},{\"action\":{\"type\":\"text\",\"payload\":\"3\",\"label\":\"üëé\"},\"color\":\"negative\"},{\"action\":{\"type\":\"text\",\"payload\":\"4\",\"label\":\"üí§\"},\"color\":\"default\"}]";

        try {

            List<Button> buttons = mapper.readValue(buttonsData, new TypeReference<List<Button>>() {
            });
            boolean result = Identifier.isProfile(EmojiCleaner.clean(text), buttons);
            assertTrue(result);

        } catch (JsonProcessingException ex) {
            System.out.println(ExceptionUtil.getFormattedDescription(ex));
            fail(ex.getMessage());
        }
    }

    @Test
    public void testIsNoTextInProfileWarn() {
        try {
            String text = "–í —Ç–≤–æ–µ–π –∞–Ω–∫–µ—Ç–µ —Å–æ–≤—Å–µ–º –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ —Ç—ã –Ω–∞–ø–∏—à–µ—à—å –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ –∏ –∫–æ–≥–æ –∏—â–µ—à—å, –º—ã —Å–º–æ–∂–µ–º –ª—É—á—à–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç–µ–±–µ –ø–∞—Ä—É.<br><br>1. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã –∏ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –ø—É—Å—Ç—ã–º.<br>2. –ù–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ-—Ç–æ –≤ —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É.";
            String buttonsData = "[\n"
                    + "	{\n"
                    + "		\"action\": {\n"
                    + "			\"type\": \"text\",\n"
                    + "			\"payload\": \"1\",\n"
                    + "			\"label\": \"1\"\n"
                    + "		},\n"
                    + "		\"color\": \"default\"\n"
                    + "	},\n"
                    + "	{\n"
                    + "		\"action\": {\n"
                    + "			\"type\": \"text\",\n"
                    + "			\"payload\": \"2\",\n"
                    + "			\"label\": \"2\"\n"
                    + "		},\n"
                    + "		\"color\": \"default\"\n"
                    + "	}\n"
                    + "]";
            List<Button> buttons = mapper.readValue(buttonsData, new TypeReference<List<Button>>() {
            });
            boolean result = Identifier.isNoTextInProfileWarn(text, buttons);
            assertTrue(result);

        } catch (JsonProcessingException ex) {
            System.out.println(ExceptionUtil.getFormattedDescription(ex));
            fail(ex.getMessage());
        }

    }

    @Test
    public void testIsTelegramInvite() {
        try {

            String text = "–í—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∫–µ—Ç—ã –∏—Å—Ç–µ–∫–ª–æ, –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.<br><br>–ê–ª–µ–∫—Å–∞–Ω–¥—Ä, –î–∞–π–≤–∏–Ω—á–∏–∫ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ Telegram –∏ VK.<br>–¢—ã –º–æ–∂–µ—à—å –≤ –æ–¥–∏–Ω –∫–ª–∏–∫ –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ü–µ–Ω–∫–µ –∞–Ω–∫–µ—Ç –≤ Telegram –∏ —Ç–∞–∫ –∂–µ –±—ã—Å—Ç—Ä–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ VK.";
            String buttonsData = "[{\"action\":{\"type\":\"text\",\"payload\":\"1\",\"label\":\"–ê–Ω–∫–µ—Ç—ã –≤ Telegram\"},\"color\":\"positive\"},{\"action\":{\"type\":\"text\",\"payload\":\"2\",\"label\":\"–ê–Ω–∫–µ—Ç—ã –≤ VK\"},\"color\":\"default\"}]";
            List<Button> buttons = mapper.readValue(buttonsData, new TypeReference<List<Button>>() {
            });
            boolean result = Identifier.isAdvertisement(text, buttons);
            assertTrue(result);

        } catch (JsonProcessingException ex) {
            System.out.println(ExceptionUtil.getFormattedDescription(ex));
            fail(ex.getMessage());
        }
    }

    @Test
    public void testIsLocation() {
//        try {

        String text = "–í—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∫–µ—Ç—ã –∏—Å—Ç–µ–∫–ª–æ, –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.<br><br>–ê–ª–µ–∫—Å–∞–Ω–¥—Ä, –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏ —É–≤–∏–¥–∏—à—å –∫—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ä—è–¥–æ–º";
        String buttonsData = "[{\"action\":{\"payload\":\"1\",\"label\":\"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å\"}}]";
        List<Button> buttons = null;//mapper.readValue(buttonsData, new TypeReference<List<Button>>() {});
        boolean result = Identifier.isLocation(text, buttons);
        assertTrue(result);

//        } catch (JsonProcessingException ex) {
//            System.out.println(ExceptionUtil.getFormattedDescription(ex));
//            fail(ex.getMessage());
//        }
    }

    @Test
    public void testIsAdvise() {
        try {
            //[4,33446,1,-91050183,1673801926,"–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –º–æ–∂–µ—Ç —Å–æ–±–∏—Ä–∞—Ç—å –±–æ–ª—å—à–µ –ª–∞–π–∫–æ–≤.<br><br>–ü–æ–ø—Ä–æ–±—É–π –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –∞–Ω–∫–µ—Ç–µ.<br><br>1. –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –∞–Ω–∫–µ—Ç—ã.<br>2. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã.",{"title":" ... ","keyboard":{"one_time":false,"buttons":[[{"action":{"type":"text","payload":"1","label":"1"},"color":"default"},{"action":{"type":"text","payload":"2","label":"2"},"color":"default"}]]}},{}]
            String text = "–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –º–æ–∂–µ—Ç —Å–æ–±–∏—Ä–∞—Ç—å –±–æ–ª—å—à–µ –ª–∞–π–∫–æ–≤.<br><br>–ü–æ–ø—Ä–æ–±—É–π –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –∞–Ω–∫–µ—Ç–µ.<br><br>1. –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –∞–Ω–∫–µ—Ç—ã.<br>2. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã.";
            String buttonsData = "[{\"action\":{\"type\":\"text\",\"payload\":\"1\",\"label\":\"1\"},\"color\":\"default\"},{\"action\":{\"type\":\"text\",\"payload\":\"2\",\"label\":\"2\"},\"color\":\"default\"}]";
            List<Button> buttons = mapper.readValue(buttonsData, new TypeReference<List<Button>>() {
            });
            boolean result = Identifier.isAdvise(text, buttons);
            assertTrue(result);
        } catch (JsonProcessingException ex) {
            System.out.println(ExceptionUtil.getFormattedDescription(ex));
            fail(ex.getMessage());
        }

    }

//    @Test
//    public void testIsNeedSubscription() {
//        try {
//            
//            String text = "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –î–∞–π–≤–∏–Ω—á–∏–∫–∞ ? [club91050183|@dayvinchik].";
//            String buttonsData = "[{\"action\":{\"type\":\"text\",\"payload\":\"1\",\"label\":\"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å\"},\"color\":\"positive\"},{\"action\":{\"type\":\"text\",\"payload\":\"2\",\"label\":\"–í–æ–∑–º–æ–∂–Ω–æ –ø–æ–∑–∂–µ\"},\"color\":\"default\"}]";
//            List<Button> buttons = mapper.readValue(buttonsData, new TypeReference<List<Button>>() {});
//            boolean result = Identifier.isNeedSubscription(text, buttons);
//            assertTrue(result);
//
//        } catch (JsonProcessingException ex) {
//            System.out.println(ExceptionUtil.getFormattedDescription(ex));
//            fail(ex.getMessage());
//        }
//    }
    @Test
    public void testIsSleeping() {
        try {

            String text = "1. –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã.<br>2. –ú–æ—è –∞–Ω–∫–µ—Ç–∞.<br>3. –Ø –±–æ–ª—å—à–µ –Ω–µ —Ö–æ—á—É –Ω–∏–∫–æ–≥–æ –∏—Å–∫–∞—Ç—å.<br>***<br>4. ?? –ë–æ—Ç –∑–Ω–∞–∫–æ–º—Å—Ç–≤ –î–∞–π–≤–∏–Ω—á–∏–∫ –≤ Telegram.";
            String buttonsData = "[\n"
                    + "	{\n"
                    + "		\"action\": {\n"
                    + "			\"type\": \"text\",\n"
                    + "			\"payload\": \"1\",\n"
                    + "			\"label\": \"1\"\n"
                    + "		},\n"
                    + "		\"color\": \"positive\"\n"
                    + "	},\n"
                    + "	{\n"
                    + "		\"action\": {\n"
                    + "			\"type\": \"text\",\n"
                    + "			\"payload\": \"2\",\n"
                    + "			\"label\": \"2\"\n"
                    + "		},\n"
                    + "		\"color\": \"default\"\n"
                    + "	},\n"
                    + "	{\n"
                    + "		\"action\": {\n"
                    + "			\"type\": \"text\",\n"
                    + "			\"payload\": \"3\",\n"
                    + "			\"label\": \"3\"\n"
                    + "		},\n"
                    + "		\"color\": \"default\"\n"
                    + "	},\n"
                    + "	{\n"
                    + "		\"action\": {\n"
                    + "			\"type\": \"text\",\n"
                    + "			\"payload\": \"4\",\n"
                    + "			\"label\": \"?? 4\"\n"
                    + "		},\n"
                    + "		\"color\": \"default\"\n"
                    + "	}\n"
                    + "]";
            List<Button> buttons = mapper.readValue(buttonsData, new TypeReference<List<Button>>() {
            });
            boolean result = Identifier.isSleeping(text, buttons);
            assertTrue(result);

        } catch (JsonProcessingException ex) {
            System.out.println(ExceptionUtil.getFormattedDescription(ex));
            fail(ex.getMessage());
        }
    }

    @Test
    public void testIsSleeping2() {
        try {

            String text = "1. –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã.<br>2. –ú–æ—è –∞–Ω–∫–µ—Ç–∞.<br>3. –Ø –±–æ–ª—å—à–µ –Ω–µ —Ö–æ—á—É –Ω–∏–∫–æ–≥–æ –∏—Å–∫–∞—Ç—å.<br>***<br>4. ‚úàÔ∏è –ë–æ—Ç –∑–Ω–∞–∫–æ–º—Å—Ç–≤ –î–∞–π–≤–∏–Ω—á–∏–∫ –≤ Telegram.";
            String buttonsData = "[\n"
                    + "							{\n"
                    + "								\"action\": {\n"
                    + "									\"type\": \"text\",\n"
                    + "									\"payload\": \"1\",\n"
                    + "									\"label\": \"1\"\n"
                    + "								},\n"
                    + "								\"color\": \"positive\"\n"
                    + "							},\n"
                    + "							{\n"
                    + "								\"action\": {\n"
                    + "									\"type\": \"text\",\n"
                    + "									\"payload\": \"2\",\n"
                    + "									\"label\": \"2\"\n"
                    + "								},\n"
                    + "								\"color\": \"default\"\n"
                    + "							},\n"
                    + "							{\n"
                    + "								\"action\": {\n"
                    + "									\"type\": \"text\",\n"
                    + "									\"payload\": \"3\",\n"
                    + "									\"label\": \"3\"\n"
                    + "								},\n"
                    + "								\"color\": \"default\"\n"
                    + "							},\n"
                    + "							{\n"
                    + "								\"action\": {\n"
                    + "									\"type\": \"text\",\n"
                    + "									\"payload\": \"4\",\n"
                    + "									\"label\": \"‚úàÔ∏è 4\"\n"
                    + "								},\n"
                    + "								\"color\": \"default\"\n"
                    + "							}\n"
                    + "						]";
            List<Button> buttons = mapper.readValue(buttonsData, new TypeReference<List<Button>>() {
            });
            boolean result = Identifier.isSleeping(text, buttons);
            assertTrue(result);

        } catch (JsonProcessingException ex) {
            System.out.println(ExceptionUtil.getFormattedDescription(ex));
            fail(ex.getMessage());
        }
    }

    @Test
    public void testIsLikedBySomeone() {
        try {

            String text = "–¢—ã –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è 1 –¥–µ–≤—É—à–∫–µ, –ø–æ–∫–∞–∑–∞—Ç—å –µ—ë";
            String buttonsData = "[\n"
                    + "	{\n"
                    + "		\"action\": {\n"
                    + "			\"type\": \"text\",\n"
                    + "			\"payload\": \"1\",\n"
                    + "			\"label\": \"?\"\n"
                    + "		},\n"
                    + "		\"color\": \"positive\"\n"
                    + "	},\n"
                    + "	{\n"
                    + "		\"action\": {\n"
                    + "			\"type\": \"text\",\n"
                    + "			\"payload\": \"2\",\n"
                    + "			\"label\": \"?\"\n"
                    + "		},\n"
                    + "		\"color\": \"default\"\n"
                    + "	}\n"
                    + "]";
            List<Button> buttons = mapper.readValue(buttonsData, new TypeReference<List<Button>>() {
            });
            boolean result = Identifier.isLikedBySomeone(text, buttons);
            assertTrue(result);

        } catch (JsonProcessingException ex) {
            System.out.println(ExceptionUtil.getFormattedDescription(ex));
            fail(ex.getMessage());
        }
    }

    @Test
    public void testIsNewProfilesWantToMeet() {
        try {

            String text = "—Ö–æ—Ç—è—Ç –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ç–æ–±–æ–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å";
            String buttonsData = "[\n"
                    + "	{\n"
                    + "		\"action\": {\n"
                    + "			\"type\": \"text\",\n"
                    + "			\"payload\": \"1\",\n"
                    + "			\"label\": \"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å\"\n"
                    + "		},\n"
                    + "		\"color\": \"positive\"\n"
                    + "	},\n"
                    + "	{\n"
                    + "		\"action\": {\n"
                    + "			\"type\": \"text\",\n"
                    + "			\"payload\": \"2\",\n"
                    + "			\"label\": \"–ù–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ\"\n"
                    + "		},\n"
                    + "		\"color\": \"default\"\n"
                    + "	}\n"
                    + "]";
            List<Button> buttons = mapper.readValue(buttonsData, new TypeReference<List<Button>>() {
            });
            boolean result = Identifier.isNewProfilesWantToMeet(text, buttons);
            assertTrue(result);

        } catch (JsonProcessingException ex) {
            System.out.println(ExceptionUtil.getFormattedDescription(ex));
            fail(ex.getMessage());
        }
    }

    @Test
    public void testIsMutualLike() {
        try {

            String text = "–ï—Å—Ç—å –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è! –î–æ–±–∞–≤–ª—è–π –≤ –¥—Ä—É–∑—å—è - vk.com/id450003690<br><br>–¢—ë–Ω—è, 22, –ö–∞–ª—É–≥–∞<br>–û–±—â–µ–Ω–∏–µ?";
            String buttonsData = "[\n"
                    + "	{\n"
                    + "		\"action\": {\n"
                    + "			\"type\": \"text\",\n"
                    + "			\"payload\": \"1\",\n"
                    + "			\"label\": \"1\"\n"
                    + "		},\n"
                    + "		\"color\": \"positive\"\n"
                    + "	},\n"
                    + "	{\n"
                    + "		\"action\": {\n"
                    + "			\"type\": \"text\",\n"
                    + "			\"payload\": \"2\",\n"
                    + "			\"label\": \"2\"\n"
                    + "		},\n"
                    + "		\"color\": \"default\"\n"
                    + "	},\n"
                    + "	{\n"
                    + "		\"action\": {\n"
                    + "			\"type\": \"text\",\n"
                    + "			\"payload\": \"3\",\n"
                    + "			\"label\": \"3\"\n"
                    + "		},\n"
                    + "		\"color\": \"default\"\n"
                    + "	},\n"
                    + "	{\n"
                    + "		\"action\": {\n"
                    + "			\"type\": \"text\",\n"
                    + "			\"payload\": \"4\",\n"
                    + "			\"label\": \"?? 4\"\n"
                    + "		},\n"
                    + "		\"color\": \"default\"\n"
                    + "	}\n"
                    + "]";
            List<Button> buttons = mapper.readValue(buttonsData, new TypeReference<List<Button>>() {
            });
            boolean result = Identifier.isMutualLike(text, buttons);
            assertTrue(result);

        } catch (JsonProcessingException ex) {
            System.out.println(ExceptionUtil.getFormattedDescription(ex));
            fail(ex.getMessage());
        }
    }
}
